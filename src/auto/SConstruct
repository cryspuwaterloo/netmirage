################################################################################
 # Copyright (C) 2018 Nik Unger, Ian Goldberg, Qatar University, and the Qatar
 # Foundation for Education, Science and Community Development.
 #
 # This file is part of NetMirage.
 #
 # NetMirage is free software: you can redistribute it and/or modify it under
 # the terms of the GNU Affero General Public License as published by the Free
 # Software Foundation, either version 3 of the License, or (at your option) any
 # later version.
 #
 # NetMirage is distributed in the hope that it will be useful, but WITHOUT ANY
 # WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 # A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 # details.
 #
 # You should have received a copy of the GNU Affero General Public License
 # along with NetMirage. If not, see <http://www.gnu.org/licenses/>.
 ###############################################################################

import os
import subprocess
import time

Import('bareEnv')
env = bareEnv.Clone()

Import('appVersion')

def AutoVersion(target, source, env):
	appVersion['version'] = '%d.%d.%d'%(appVersion['major'], appVersion['minor'], appVersion['revision'])
	if Dir('#.git').exists():
		try:
			commitId = subprocess.check_output(['git', 'log', '--format=%h', '-n 1']).strip()
			print('Detected git install; using commit version')
			appVersion['version'] = '%s.%s'%(appVersion['version'], commitId)
			
			dirtyRepo = subprocess.call(['git', 'diff-index', '--cached', 'HEAD', '--quiet'])
			if not dirtyRepo:
				dirtyRepo = subprocess.call(['git', 'diff-files', '--quiet'])
				if not dirtyRepo:
					dirtyRepo = subprocess.check_output(['git', 'ls-files', '--exclude-standard', '--others', Dir('#.git').abs_path()]).strip()
			if dirtyRepo:
				print('Dirty git workspace; using timed version')
				appVersion['version'] = '%s.%d'%(appVersion['version'], int(time.time()))
		except:
			pass
	print('Version:', appVersion['version'])
	
	code = '// This file was generated by SConstruct. DO NOT EDIT!\n' + source[0].get_contents()
	for find, replace in appVersion.iteritems():
		code = code.replace('$'+str(find), str(replace))
	with open(str(target[0]), 'w') as output:
		output.write(code)

verSrc = env.Command(target='version.c', source='version.c.in', action=AutoVersion)
env.Append(CPPPATH = '.')
verObj = env.Object('version.c')

env.AlwaysBuild(verSrc)

Export('verObj')
